from typing import Any, Union, Optional, List, Sequence, Callable

def __new__(javascript_object: object):
    pass

class JSON:  # JavaScript (transcrypt) compatibility
    @staticmethod
    def parse(s: str): ...

    @staticmethod
    def stringify(obj): ...

this = object()

def js_get_typeof(obj) -> str: ...

class Object:
    @staticmethod
    def js_keys(obj) -> List[str]: ...  # transcrypt converts to Object.keys() static method

class Array:
    @staticmethod
    def isArray(obj) -> bool: ...

class UIkit:
    @staticmethod
    def notification(message: str, status_or_options:int|dict|None=None):...


def setTimeout(func, timeout_ms: int): ...

class EventTarget:
    def addEventListener(self, type_:str, listener:Callable, options_or_useCapture: Optional[Union[dict, bool]]=None): ...
    def dispatchEvent(self, event) -> bool: ...  # TODO: Event
    def removeEventListener(self, type_:str, listener:Callable, options_or_useCapture: Optional[Union[dict, bool]]=None): ...

class Storage:
    def clear(self): ...
    def getItem(self, keyName: str) -> Optional[str]: ...
    def key(self, index: int) -> str: ...
    def removeItem(self, keyName: str): ...
    def setItem(self, keyName: str, keyValue: str): ...
    @property
    def length(self) -> int: ...

class _Window(EventTarget):
    def __init__(self):
        self.innerWidth: int = 0
        self.innerHeight: int = 0
    def setTimeout(self, func, timeout_ms): ...

    def localStorage(self) -> Storage: ...

window = _Window()

class _Screen:
    def __init__(self):
        self.availHeight: int = 0
        self.availWidth: int = 0
        self.colorDepth: int = 0
        self.height: int = 0
        self.width: int = 0
        self.pixelDepth: int = 0

screen = _Screen()

def alert(msg: str): ...


class Node:
    def appendChild(self, child: Node) -> Node: ...
    def insertChild(self, newNode: Node, referenceNode: Node) -> Node: ...


class Element(Node, EventTarget):
    def __init__(self):
        self.id = 'element id'
        self.style: Any = object()
        self.innerHTML = 'text + tags'

    def setAttribute(self, name: str, value: str): ...
    def getAttribute(self, name: str) -> str: ...
    def getAttributeNames(self) -> List[str]: ...
    def removeAttribute(self, name): ...
    def hasAttribute(self, name) -> bool: ...
    def hasAttributes(self) -> bool: ...


    def append(self, *params: Union[Node, str]): ...
    def after(self, *params: Union[Node, str]): ...
    def before(self, *params: Union[Node, str]): ...
    def closest(self, selectors) -> Optional[Element]: ...
    def matches(self, selectors) -> bool: ...
    def prepend(self, *params: Union[Node, str]): ...
    def querySelector(self, selectors) -> Optional[Element]: ...
    def querySelectorAll(self, selectors) -> List[Element]: ...  # [TODO] NodeList
    def remove(self): ...
    def replaceChildren(self, *children: Union[Node, str]): ...
    def replaceWith(self, *params: Union[Node, str]): ...
    def scroll(self, x_coord_or_options:Union[int,dict], y_coord:Optional[int]=None): ...



class _Document(EventTarget):
    def __init__(self): ...
    def createElement(self, tag: str) -> Element: ...
    def getElementById(self, id_: str) -> Element: ...


document = _Document()

class _History:
    def __init__(self): ...
    def pushState(self, state, title, url): ...


history = _History()

class console:
    @staticmethod
    def log(*args): ...

class XMLHttpRequest:
    DONE = 0
    def __init___(self):
        self.onreadystatechange = lambda: None
        self.readyState = XMLHttpRequest.DONE
        self.status = 0
    def open(self, method, url, async_=True, user=None, password=None): ...
    def setRequestHeader(self, header, value): ...
    def send(self, body): ...


class HTMLAudioElement(Element):
    def play(self): ...

def Audio(self, url=None) -> HTMLAudioElement: ...

def setInterval(func, delay_ms, *args) -> int: ...

